<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($rootScope, $scope, $http, $timeout, $location) {
	/* widget controller */
	var c = this;
	c.scanStarted = false;
	c.scanRequested = c.data.scanRequested;
	var shared = c.widget.options.shared;
	shared.scanner = {};
	
	var opts = {
		// Whether to scan continuously for QR codes. If false, use scanner.scan() to manually scan.
		// If true, the scanner emits the "scan" event when a QR code is scanned. Default true.
		continuous: true,

		// The HTML element to use for the camera's video preview. Must be a <video> element.
		// When the camera is active, this element will have the "active" CSS class, otherwise,
		// it will have the "inactive" class. By default, an invisible element will be created to
		// host the video.
		video: document.getElementById('preview'),

		// Whether to horizontally mirror the video preview. This is helpful when trying to
		// scan a QR code with a user-facing camera. Default true.
		mirror: false,

		// Whether to include the scanned image data as part of the scan result. See the "scan" event
		// for image format details. Default false.
		captureImage: false,

		// Only applies to continuous mode. Whether to actively scan when the tab is not active.
		// When false, this reduces CPU usage when the tab is not active. Default true.
		backgroundScan: true,

		// Only applies to continuous mode. The period, in milliseconds, before the same QR code
		// will be recognized in succession. Default 5000 (5 seconds).
		refractoryPeriod: 5000,

		// Only applies to continuous mode. The period, in rendered frames, between scans. A lower scan period
		// increases CPU usage but makes scan response faster. Default 1 (i.e. analyze every frame).
		scanPeriod: 10
	};
	
  c.stopScan = function() {
		c.scanStarted = false;
		c.scanRequested = false;
		shared.scanner.stop();
	};
	c.startScan = function() {
		c.scanRequested = true;
		var timerId = setInterval(function(){
			// wait until the video tag exists
			if(!($scope.videoEl = $("video")[0])) {
				return;
			}
			clearInterval(timerId);

			// instanciate instascan
			var opts = {
				continuous: true,
				video: $scope.videoEl,
				mirror: false,
				captureImage: false,
				backgroundScan: true,
				refractoryPeriod: 5000,
				scanPeriod: 5
			};
			shared.scanner = new Instascan.Scanner(opts);

			shared.scanner.addListener('active', function (content) {
				console.log("** DOM Scanner is active");
			});
			shared.scanner.addListener('inactive', function (content) {
				c.scanRequested = false;
				c.scanStarted = false;
			});
			shared.scanner.addListener('scan', function (content) {
				console.log("** DOM Scanner found > " + content);
				shared.scanner.stop();
				$rootScope.$broadcast('scanner.found', content);
				$scope.$parent.$dismiss();
			});
			Instascan.Camera.getCameras().then(function (cameras) {
				if (cameras.length > 0) {
					// grab the environment camera if available; doesnt work on IOS :(
					shared.scanner.start(cameras.length > 1 ? cameras[1] : cameras[0]);
					c.scanStarted = true;
				} else {
					c.scanRequested = false;
					c.scanError = true;
					console.error('** Browser did not provide any camera');
				}
			}).catch(function(error) {
					shared.scanner.stop();
					c.scanRequested = false;
					c.scanError = true;
					console.error(error);
			});	
		}, 1000);	
	};
	
	$timeout(function() {
		if(c.scanRequested) c.startScan();
	});
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>dom-scanner</id>
        <internal>false</internal>
        <link/>
        <name>DOM Scanner</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() { 
	data.scanRequested = false;
	if (input !== undefined && input.scanNow == true) {
		data.scanRequested = true;
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>syvon</sys_created_by>
        <sys_created_on>2018-10-04 15:22:54</sys_created_on>
        <sys_id>3443f0804f8d2300171571dd0210c78a</sys_id>
        <sys_mod_count>60</sys_mod_count>
        <sys_name>DOM Scanner</sys_name>
        <sys_package display_value="OAB Datacenter Operations" source="x_12167_oab_ir_ass">fd05fe93dbb42300656053184b961908</sys_package>
        <sys_policy/>
        <sys_scope display_value="OAB Datacenter Operations">fd05fe93dbb42300656053184b961908</sys_scope>
        <sys_update_name>sp_widget_3443f0804f8d2300171571dd0210c78a</sys_update_name>
        <sys_updated_by>syvon</sys_updated_by>
        <sys_updated_on>2019-01-31 10:31:59</sys_updated_on>
        <template><![CDATA[<div ng-if="c.scanRequested" class="text-center">
  <video autoplay="false" height="320" ng-show="c.scanStarted" id="preview" ng-click="c.stopScan()"></video>
</div>
<div ng-click="c.startScan()" ng-if="!c.scanStarted && !c.scanRequested && !c.scanError">
	<div class="text-center">
      <i class="fa fa-3x fa-qrcode"></i><br/>
      <h3>${Start scanning}</h3>
  	</div>
</div>
<div ng-if="!c.scanStarted && c.scanRequested">
	<div class="text-center">
    	<i class="fa fa-spinner fa-3x fa-spin"></i><br/>
      <h3>${Starting..}</h3>
  	</div>
</div>
<div ng-if="c.scanError">
	<div class="text-center">
    	<i class="fa fa-warning fa-3x"></i><br/>
      <h4>${Error accessing your camera}</h4>
  	</div>
</div>]]></template>
    </sp_widget>
</record_update>
